x
x
x<-1
x
x
x<-10
x
?read.table
x<-10
y<-20
x+y
x+y/2
(x+y)/2
z->1:20
z->(1:20)
z->(1:20)
z<-(1:20)
z<-(1:20,50)
z
z<-(1:20 , 50)
z<-v(1:20,50)
z<-c(1:20,50)
m<-matrix(0,4,10)
x<-10
m
install.packages(“DBI")
install.packages('DBI')
install.packages('RPostgres')
df
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),user="postgres",password="nini",dbname="trabalho_passofundo",
host="localhost", port=5432)
sql = paste ("SELECT x,y,val,st_X(geom) as latitude,
st_Y(geom) as longitude
FROM (select(st_pixelaspoints((SELECT(ST_Union(ST_Clip(rast,
ST_Transform((select geom from municipios_ibge where gid=109),
ST_SRID(rast) ) ) ) ) AS rast from dados_raster
WHERE ST_Intersects(rast, (select geom from municipios_ibge where gid=109))),1)).*) r1")
rs = dbSendQuery(con,sql)
df = dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
df
library(DBI)
library(RPostgres)
con<-dbConnect(RPostgres::Postgres(),user="postgres",password="nini",dbname="trabalho_passofundo",host="localhost", port=5432)
sql = paste ("SELECT x,y,val,st_X(geom) as latitude,
st_Y(geom) as longitude
FROM (select(st_pixelaspoints((SELECT(ST_Union(ST_Clip(rast,
ST_Transform((select geom from municipios_ibge where gid=109),
ST_SRID(rast) ) ) ) ) AS rast from dados_raster
WHERE ST_Intersects(rast, (select geom from municipios_ibge where gid=109))),1)).*) r1")
rs = dbSendQuery(con,sql)
df = dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
df
library(DBI)
library(RPostgres)
con<-dbConnect(RPostgres::Postgres(),user="postgres",password="nini",dbname="trabalho_passofundo",host="localhost", port=5432)
sql = paste ("SELECT x,y,val,st_X(geom) as latitude,st_Y(geom) as longitude FROM (select(st_pixelaspoints((SELECT(ST_Union(ST_Clip(rast,ST_Transform((select geom from municipios_ibge where gid=109),ST_SRID(rast) ) ) ) ) AS rast from dados_raster WHERE ST_Intersects(rast, (select geom from municipios_ibge where gid=109))),1)).*) r1")
rs = dbSendQuery(con,sql)
df = dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
df
g <- function(x){
r <- x+1
return (r)
}
n <- g(10)
g
g<-function(x){
r <- x+1
return (r)
}
n<-g(10)
g<-function(x){
r<-x+1
return (r)
}
n
gerarDados<- function(elementos, valorInicial, valorFinal){
x <- seq(1:elementos)
y <- runif(elementos, valorInicial, valorFinal)
df <- data.frame(y,x)
return (df)
}
a<-gerarDados(20,1,50)
a
## função que grava um data.frame em um arquivo texto
gravarTabela<-function(df,nomeArquivo){
write.table(x=df, file=funcoes, quote=FALSE,sep=";",row.names = FALSE)
}
## função que grava um data.frame em um arquivo texto
gravarTabela<-function(df,funcoes.r){
write.table(x=df, file=funcoes.r, quote=FALSE,sep=";",row.names = FALSE)
}
## função que grava um data.frame em um arquivo texto
gravarTabela<-function(df,funcoes.r){
write.table(x=df, file=funcoes.r, quote=FALSE,sep=";",row.names = FALSE)
}
a<-gerarDados(20,1,50)
a
# gerando um data.frame com dados aleatórios
dados <- gerarDados(10,3.5,128.9)
dados
plot(dados$y~dados$x, xlab='X', ylab='Y',
main="Dados aleatórios gerados com funções")
## gravando os dados gerados em um arquivo
gravarTabela(dados,"conteudo.r")
gravarTabela(dados,"conteudo.r")
## função que grava um data.frame em um arquivo texto
gravarTabela<-function(df,funcoes.r){
write.table(x=df, file=funcoes.r, quote=FALSE,sep=";",row.names = FALSE)
}
## definindo o diretório de trabalho
setwd("C:\db-laza")
## função que grava um data.frame em um arquivo texto
gravarTabela<-function(df,funcoes.r){
write.table(x=df, file=funcoes.r, quote=FALSE,sep=";",row.names = FALSE)
}
## definindo o diretório de trabalho
setwd("C/db-laza")
## função que grava um data.frame em um arquivo texto
gravarTabela<-function(df,funcoes.r){
write.table(x=df, file=funcoes.r, quote=FALSE,sep=";",row.names = FALSE)
}
## definindo o diretório de trabalho
setwd("C:/db-laza")
## referenciando o arquivo com funções
source("functions.R")
## definindo o diretório de trabalho
setwd("C:/db-laza")
## referenciando o arquivo com funções
source("funcoes.R")
## gerando um data.frame com dados aleatórios
dados <- gerarDados(10,3.5,128.9)
dados
## plotando um gráfico
plot(dados$y~dados$x, xlab='X', ylab='Y',
main="Dados aleatórios gerados com funções")
## gravando os dados gerados em um arquivo
gravarTabela(dados,"conteudo.r")
## definindo o diretório de trabalho
setwd("C:/db-laza")
## referenciando o arquivo com funções
source("funcoes.r")
## gerando um data.frame com dados aleatórios
dados <- gerarDados(10,3.5,128.9)
dados
## plotando um gráfico
plot(dados$y~dados$x, xlab='X', ylab='Y',
main="Dados aleatórios gerados com funções")
## gravando os dados gerados em um arquivo
gravarTabela(dados,"conteudo.r")
setwd("C:/db-laza")
source("funcoes.r")
dados <- gerarDados(10,3.5,128.9)
## Criando a imagem
png(filename="plot.png",width = 1024, height = 768)
## plotando um gráfico
plot(dados$y~dados$x, xlab='X', ylab='Y',
main="Dados aletatórios gerados com funções")
## liberando o arquivo criado
dev.off()
